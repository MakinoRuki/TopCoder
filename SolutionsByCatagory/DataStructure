SRM 697 Div1 Med
n(n<=200000)个选手参加2^m(m<=30)天比赛，每个选手有个a[i](0<=a[i]<2^m)能力值，第j天比赛时，把所有人的a[i]和j异或，按照从小到大排序。
每个人得分排名的平方。求每个人2^m天得分总和mod 1e9+7之后的和。
Solution：
一个选手假设排名第x，那么他的得分x^2就是所有unordered pair(i,j)的个数和，其中选手i和j都排在他前面。排在他前面的选手就看a值和他不同的最高位，可以按照
这个把所有选手分组，分成m组。那么对于他来说答案就是(c1^2+c2^2+...+cm^2)*2^(m-1)+(c1*(n-1-c1)+...+cm*(n-1-cm))*2^(m-2)。
而对于ci的统计，可以用trie树，使用O(nm)的时间和空间解决。

SRM 715 Div2 Hard
给定程序遍历一棵树：
--------------------------------------------------------
|dfs(cur, order):                                      |
|  if (order == "pre"):                                |
|    return v.label+dfs(v.left, s[0])+dfs(v.right,s[1])|
|  if (order == "in"):                                 |
|    return dfs(v.left, s[2])+v.label+dfs(v.right,s[3])|
|  if (order == "post"):                               |
|    return dfs(v.left,s[4])+dfs(v.right,s[5])+v.label |
--------------------------------------------------------
给出三个序列：
a1=dfs(root,"pre")
a2=dfs(root,"in")
a3=dfs(root,"post")
问存不存在一棵n(n<=50)个顶点的树，按照上述程序遍历能得到这三个序列。
其中s[0],s[2],s[4]保证cover了pre,in,post;s[1],s[3],s[5]同样。
Solution:
直接dfs。用pre序列找出根，in序列划分左右子树。由于s序列的给定条件，保证了子树一定有三种遍历方式。

TCO18 R2C Med
长度为n(n<=10^5)的数组，里面的数字为1-m(m<=50)。问有多少连续子序列含有majority元素。其中majority元素是指出现次数严格大于序列长度一半的元素。
Solution:
其实也就是求2*(si - sj)>i-j的(j,i)对有多少。
对每个位置用BIT维护si-i的和。然后枚举1-m求解。

SRM 753 Div1 Med
长度为Q(Q<=10^6)的伪随机序列，X[i]%rate!=0则在一个multiset中插入X[i]，否则假设插入了cnt个元素，则删掉第X[i]%cnt个插入的元素。
如果此时set为空或者已经删过这个元素则什么都不做。每次操作后设当前set中两两亦或最大值为Y[i]，则Z[i]=(Z[i-1]*base+Y[i])%rate。求Z[Q-1]。
Solution：
用binary的trie树维护set中的数字。如果插入数字则维护最大值以及xor值为最大值的下标idx1&idx2；
否则如果删掉的元素为idx1/idx2则清空集合重新插入所有再次维护最大值，不然就什么都不做。
复杂度估计！！！
由于是伪随机数列，删掉的元素为idx1/idx2的概率为2/Q，因此复杂度期望为Q*(2/Q*Q*log(MAXV)+(1-2/Q)*log(MAXV))=O(Q*log(MAXV))。
