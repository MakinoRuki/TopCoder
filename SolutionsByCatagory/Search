SRM 606 Div1 Hard
给出三维空间n<=50个点，求有多少非空子集s满足s中的点都是某一个三维空间立方体的顶点。
Solution：
枚举任意三个点立方体就被确定了。根据枚举的边长d来dfs确定每个点要不要加入最后的子集s中。
check条件为当前点x同之前任意点的距离为d|2d|3d，或者当前点和之前某两点之间和为4d|6d。
实际的复杂度大概只有O(n^3)*(2^8)个合法子集s。

SRM 621 Div1 Med
给定n(n<=4000)个顶点的两棵树，每棵树的n个顶点从1到n编号。对于第一棵树上的边e1和第二棵树上的边e2，第一棵树上砍掉e1得到编号集合A1,B1；
第二棵树上砍掉e2，得到编号集合A2,B2。定义s(e1, e2)为{A1,A2},{A1,B2},{B1,A2},{B1,B2}中共同编号的最大值。
求所有pair(e1, e2)的和。
Solution：
枚举e1，dfs求出A1或者B1。然后枚举e2,可以求出{A2,A1}然后可以算出另外三个({A1,B2},{B1,A2},{B1,B2})。
在枚举e2以及求出{A1, A2}的时候并不是n^2，可以转成有根树然后dfs+dp的O(n)求出。

SRM 622 Div1 Med
n(n<=50)个顶点的一棵树，边上有边权。现在要把树切成一些子树，满足子树直径不超过maxDist。问最少切成多少棵子树。
Solution：
贪心地从叶子节点开始往上切。对于一个节点，把还连着的节点距离它的距离排序，从大到小切掉距离>maxDist的。剩下的两两看加和>maxDist的。
再剩下的就更新为当前根节点往下延伸的最深的叶子节点的深度。

SRM 644 Div2 Hard
SRM 646 Div1 Med
无穷大平面，一个人从原点出发，每秒可以上下左右移动一步。有n<=47个障碍物。问k<=10^9以内所能到达的x坐标最大的点x是多大。
Solution：
离散化。由于每次转向都必然是在障碍物附近。那么枚举以每个障碍物所在坐标为中心的九宫格，得到50*9个点，然后bfs。
每次搜到一个点后，尽量向右走，更新答案的x坐标。然后扩展到九宫格内的其他点。

SRM 648 Div1 Med
N=10^9种物品，要从中买K=10^9个。对于第i种来说，买第j个是i * (2^(j-1))元。
现在问，以总价钱最小来买这K个，买来的最贵的那个的价钱是多少。答案mod 10^9 + 7。
找找规律可以发现，第一个是买遍第一种，2-3买遍前2种，4-7买遍前4种，8-15买遍前8种，etc。至此规律明显了。
这样到了最后会存在一个2^x > N，那这时候一定是1-n种各买一个，一遍又一遍地买下去。此时我们便可以看成是，所有的物品实现买了m次，
将原来的K弱化掉m * N之后，再来求解本题。这时候就可以放心二分最贵价钱啦！
统计个数的时候，注意到一定是i小的买的次数多，那么每种物品买的次数实际上是随着i的增大而递减的。存在单调性。可以枚举每个power，O(1)求出。

SRM 650 Div1 Med
一棵h=10层的平衡二叉树，在里面加上三条边。给出加边后的图，问去掉三条边后原图是否为平衡二叉树。
Solution:
首先去掉自环和重边。
然后就是先看deg = 1的点，必然为叶子节点。然后两个叶子节点所连接的deg<=3的点必然为合法（所连边不需要删掉）的非叶节点。
把这些点所连的边不考虑之后，可以去掉的边实际上并不多。
证明就是，考察一棵层数较少的平衡二叉树，考虑最坏的情况（也就是可去掉边最多的情况），必然是多出来的三条边加在叶子之间（因为底层的可以影响高层的节点）。
然后要使影响的范围尽量大，多加的边连接的两个叶子节点的LCA就要尽量往上。那么最终加的三条边一定是对称分布在叶节点之间。
然后层数增加一层，可以发现最多增加6条可删的边。因此最终可删的边不会超过70。那么,就可以直接枚举了.
把这些可删的边找出来，C(m,3)枚举即可。注意判平衡二叉树的时候，丢进去的图可能有环！
还有一个小技巧就是在用叶子节点找合法的非叶节点的时候，可以枚举层数，然后最多找h层就能把这些点全部找出来。

SRM 651 Div2 Hard
10*10的矩阵，有一些空白'.'和一些障碍'#'。有k<=8个狐狸要去占领空白，要求k个所占位置联通。问方案数。
Solution:
数据规模小，直接dfs。枚举每个位置u选，用$代替，以此为起点dfs出去。dfs的时候枚举各个位置v选或不选。返回后将u标记为＃之后彻底无视这个点。

SRM 668 Div1 Med
n(n<=2000)个点，m(m<=2000)条边的有向图，问是否可能k从某个值开始，不管k多大，都存在一条从0到1长度为k的路径和从1到0长度为k的路径。
Solution：
从0到1和从1到0的路径上必然都有环。且因为来回路径长度都为k，则两环长度gcd=1。那么也就是说经过0的所有环的环长的gcd必须都为1。
则从0开始bfs，找出所有len<=3n的环求gcd。

SRM 685 Div1 Med(dfs+结论)
SRM 695 Div1 Med(搜索)

SRM 705 div1 Med
n(n<=50)个箱子，每个箱子有个物体。给出n*m矩阵，mat[i][j]表示箱子i中的物体在第j轮会被全部送去mat[i][j]。且每一轮n个箱中物体的移动是同时发生的。
游戏进行10^100轮，每轮选择一个j，按照mat[i,j]移动n个箱子中所有物体。问最后至少有多少个箱中有物体。
Solution：
10^100轮后有些箱子中的物体会被合并，且一旦合并就不会再分开。因此从状态(i,i)开始扩展，bfs出所有可以合并的箱子对(a,b)。
然后最后在找解时候可以贪心。比如(a,b)可以合并，就mark出a。然后对所有b也mark上已访问。
但是如果(b,c)不可以合并，那么就算(a,c)可以合并，也要标成不可合并。否则(a,b)+(a,c)，就变成了(b,c)也可以合并。

SRM 716 Div1 Med / Div2 Hard
n(n<=2000)个顶点的一棵树，从0开始，每次选一个点走过去，一共选m个。把m个travel距离记下来，放到set里，记为D(|D|<=2000)。
问是否存在一个长m的travel路径，能得到D。
Solution：
从0开始bfs。只遍历距离在D中的顶点。然后两两check遍历过的顶点，看是否能cover到D中的所有距离。

TCO17 R1A Div1 Med
A*B*C(A,B,C<=100)的一个cube，每次选一块切一刀，要求切后坐标为整。问切出来的所有最短边>=S(S<=10)的cube中，另外两边XY乘积和的最大值是多少。
Solution：
看看sample。
1.不允许有最短边<S的块。否则浪费。
2.能切的边里，尽量均分。

SRM 734 Div1 Med
牌堆中有10种牌，其中1可以看作11。牌堆中每种牌有0-4张，总数不超过16张。
player有两张明牌，dealer有一张明牌。
player可以选择从牌堆中摸牌或者停，但超过21则输掉。
dealer首先将1看作11，如果总和在17到21之间则停止摸牌；否则将1看作1，超过21则输掉，否则必须继续摸牌。
最终两边停止时，player大于21则输；否则dealer大于21则player直接赢；否则如果player总和未超21且大于dealer，则player赢，反之dealer赢。
问player赢的概率。
Solution：
直接暴力+记忆化搜。
最多只有一张ace(11)。dp1[sum][ace][deck]表示player和为sum，有没有ace，牌堆状态为deck时player赢的概率。
那么每次枚举player摸牌或者不摸，然后求出dealer的和取所有值的概率。
对于dealer同样记忆化dp2[sum][ace][deck]，不过这里面存的是长度为0-21的vector表示dealer最终结果为vector[i]的概率。

SRM 739 Div1 Med
300个牛，每个牛有个食量c[i]。路上坐标>1处有300个谷仓，每个谷仓无限量食物，坐标p[j]。开始所有牛都在0。
每一时刻，每个牛可以往左走往右走吃东西或者什么也不做。问所有牛都吃完所需最小总时间。
Solution:
按照牛的食量从大到小，从左到右进行安排。二分所需最小时间，每个牛能在该位置吃多久就吃多久。
虽然有折返时间，但是由于折返时间可以跟别的牛吃饭时间同时进行，所以可以不考虑。
但是，对于每个牛来说，必须c[i]+p[j]<=二分的答案，才能在该位置吃。因为如果有折返，所需时间只会大于c[i]+p[j]。
因此必须要保证如果没有折返，牛i能到达j。

SRM 741 Div1 Med
给出一个n*n(n<=47)的方阵，全为白色，只有一个位置为黑色。现在用3个单位的L或者I的tromino去覆盖白色位置。
之后用10种颜色染色，要求相邻的tromino不同色。要求给出一个valid solution。
Solution：
这里只给出经典题目(边长为2^n)的填充方法。
将原图平均划分为4象限，黑色的在一部分中。其余三部分，在原点处放一个L型。这样每个象限中多出一个空洞。然后可以分解为4个与原问题相同的更小的问题。
至于涂色，由于有10种颜色，而每一个tromino有8个邻接边。因此随便涂色都ok。每次选available的最小色号。

SRM 758 Div1 Easy
给出[0,9]的数字的子集，问最小的n满足n是由且只由这个子集的数字组成的self-describing number是多少。
self-describing number指，长度为偶数；如果分解到十进制表示的各位a[0],b[0],a[1],b[1],...,a[x],b[x]，满足这个数字exactly包含a[i]个b[i]。
Solution：
考察一下发现0的个数只能是1，除了1最多出现9次以外，其它数字个数(a[i])不能超过3。因此暴搜。

SRM 759 Div1 Med
长度为n(n<=28)的string算hash，hash(s)=(ans*127+ord(s[i]))%mod。其中ord(s[i])为s[i]的ascii码。
问使得s[i]为a[i]/b[i]/c[i]的s的最小hash值是多少。
Solution：
折半搜索。然后在枚举左半结果选取右半结果的时候，因为要取mod，所以说要么是mod-left最小，要么是(mod+x-left)最小，其中0<=x<left。

SRM 766 Div1 Med
50个顶点的无向图，选一个顶点作为起点，每次可以访问一阶临界点二阶临界点和三阶临界点。
问访问所有顶点的跳转中，最少多少次是非三阶临界点以内的(大于三阶或者非临界)。求一个访问方案序列。
Solution：
首先非三阶临界点以内的跳转一定是C-1次，其中C为图中component个数。
对于每一个component黑白染色，先跳转黑色再回来跳转白色。
